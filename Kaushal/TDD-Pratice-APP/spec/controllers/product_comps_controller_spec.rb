require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProductCompsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # ProductComp. As you add validations to ProductComp, be sure to
  # adjust the attributes here as well.
  let(:super_admin) { FactoryGirl.create(:super_admin) }
  let(:admin) { FactoryGirl.create(:admin) }
  let(:product) { FactoryGirl.create(:product, admin: super_admin) }

  let(:valid_attributes) {
    {name: 'Buttons', image: Faker::Avatar.image, admin_id: super_admin.id, parent_id: product.id}
  }

  let(:invalid_attributes) {
    {name: ''}
  }
  
  before(:each) do
    sign_in :admin, super_admin    
  end

  describe "GET #index" do
    it "assigns all product_comps as @product_comps" do
      product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
      get :index, {product_id: product.id}
      expect(assigns(:product_comps).resultset).to eq([product_comp])
    end
  end

  describe "GET #show" do
    it "assigns the requested product_comp as @product_comp" do
      product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
      get :show, {:id => product_comp.to_param, product_id: product.id}
      expect(assigns(:product_comp)).to eq(product_comp)
    end
  end

  describe "GET #new" do
    it "assigns a new product_comp as @product_comp" do
      get :new, {product_id: product.id}
      expect(assigns(:product_comp)).to be_a_new(Product)
    end
  end

  describe "GET #edit" do
    it "assigns the requested product_comp as @product_comp" do
      product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
      get :edit, {:id => product_comp.to_param, product_id: product.id}
      expect(assigns(:product_comp)).to eq(product_comp)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new ProductComp" do
        expect {
          post :create, {:product=> valid_attributes, product_id: product.id}
        }.to change(Product.child_products, :count).by(1)
      end

      it "assigns a newly created product_comp as @product_comp" do
        post :create, {:product => valid_attributes, product_id: product.id}
        expect(assigns(:product_comp)).to be_a(Product)
        expect(assigns(:product_comp)).to be_persisted
      end

      it "redirects to the created product_comp" do
        post :create, {:product => valid_attributes, product_id: product.id}
        expect(response).to redirect_to(product_product_comps_url(product))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved product_comp as @product_comp" do
        post :create, {:product => invalid_attributes, product_id: product.id}
        expect(assigns(:product_comp)).to be_a_new(Product)
      end

      it "re-renders the 'new' template" do
        post :create, {:product => invalid_attributes, product_id: product.id}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {name: 'Buttons', image: Faker::Avatar.image, admin_id: super_admin.id, parent_id: product.id}
      }

      it "updates the requested product_comp" do
        product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
        put :update, {:id => product_comp.to_param, :product => new_attributes, product_id: product.id}
        product_comp.reload
      end

      it "assigns the requested product_comp as @product_comp" do
        product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
        put :update, {:id => product_comp.to_param, :product => valid_attributes, product_id: product.id}
        expect(assigns(:product_comp)).to eq(product_comp)
      end

      it "redirects to the product_comp" do
        product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
        put :update, {:id => product_comp.to_param, :product => valid_attributes, product_id: product.id}
        expect(response).to redirect_to(product_product_comps_url(product))
      end
    end

    context "with invalid params" do
      it "assigns the product_comp as @product_comp" do
        product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
        put :update, {:id => product_comp.to_param, :product => invalid_attributes, product_id: product.id}
        expect(assigns(:product_comp)).to eq(product_comp)
      end

      it "re-renders the 'edit' template" do
        product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
        put :update, {:id => product_comp.to_param, :product => invalid_attributes, product_id: product.id}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested product_comp" do
      product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
      expect {
        delete :destroy, {:id => product_comp.to_param, product_id: product.id}
      }.to change(Product.child_products, :count).by(-1)
    end

    it "redirects to the product_comps list" do
      product_comp = FactoryGirl.create(:component, admin: super_admin, parent_id: product.id)
      delete :destroy, {:id => product_comp.to_param, product_id: product.id}
      expect(response).to redirect_to(product_product_comps_url(product))
    end
  end

end
